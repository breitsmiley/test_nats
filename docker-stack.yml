version: '3.5'
services:
  node_publisher:
    image: breitsmiley/nats_node_publicher
#    build:
#      context: .
#      args:
#        - NODE_ENV=development
#      dockerfile: ./docker/node_publicher/Dockerfile
    ports:
      - "8080:3000"
    volumes:
#      - type: bind
#        source: ./node_publicher
#        target: /opt/app
      - type: volume
        source: np_notused
        target: /usr/src/app/node_modules
    depends_on:
      - nats
    # you can use legacy debug config or new inspect
    # NOTE: if nodemon isn't restarting on changes, you might be on Windows
    # which has trouble seeing file changes, so add -L to use legacy polling
    # https://github.com/remy/nodemon#application-isnt-restarting
    #command: ../node_modules/.bin/nodemon --debug=0.0.0.0:5858
    #command: ../node_modules/.bin/nodemon --inspect=0.0.0.0:9229
    #command: "npm start"
    command: ["wait-for", "nats:4222", "--", "node", "app.js"]
    environment:
      - NODE_ENV=development
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.hostname == nats-india]
  node1:
    image: breitsmiley/nats_node1
#    build:
#      context: .
#      args:
#        - NODE_ENV=development
#      dockerfile: ./docker/node1/Dockerfile
    ports:
      - "8081:3000"
    depends_on:
      - nats
    volumes:
#      - type: bind
#        source: ./node1
#        target: /opt/app
      - type: volume
        source: n1_notused
        target: /usr/src/app/node_modules
    command: ["wait-for", "nats:4222", "--", "node", "app.js"]
    environment:
      - NODE_ENV=development
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.hostname == nats-london]

  node2:
    image: breitsmiley/nats_node2
#    build:
#      context: .
#      args:
#        - NODE_ENV=development
#      dockerfile: ./docker/node2/Dockerfile
    ports:
      - "8082:3000"
    depends_on:
      - nats
    volumes:
#      - type: bind
#        source: ./node2
#        target: /opt/app
      - type: volume
        source: n2_notused
        target: /usr/src/app/node_modules
    command: ["wait-for", "nats:4222", "--", "node", "app.js"]
    environment:
      - NODE_ENV=development
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.hostname == nats-ny1]
  sf:
    image: breitsmiley/nats_sf
#    build:
#      context: .
#      dockerfile: ./docker/sf/Dockerfile
    ports:
      - "8083:8080"
    depends_on:
      - nats
#    volumes:
#      - type: bind
#        source: ./sf
#        target: /srv/sf
#    command: ["php", "-S", "0.0.0.0:8080", "-t", "/srv/sf/public"]
    command: ["wait-for", "nats:4222", "--", "php", "-S", "0.0.0.0:8080", "-t", "/srv/sf/public"]

  nats:
    image: breitsmiley/nats_nats
#    build:
#      context: .
#      dockerfile: ./docker/nats/Dockerfile
    ports:
      - "4222:4222"
      - "8222:8222"
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.hostname == nats-de]

  visualizer:
    image: breitsmiley/nats_visualizer
#    build:
#      context: .
#      dockerfile: ./docker/vizualizer/Dockerfile
    ports:
      - "80:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

#  nginx:
#    image: breitsmiley/nats_nginx
##    build:
##      context: .
##      dockerfile: ./docker/nginx/Dockerfile
#    deploy:
#      replicas: 5
#    ports:
#      - "81:80"
##    volumes:
##      - type: bind
##        source: ./nginx
##        target: /srv/app/public

volumes:
  np_notused:
  n1_notused:
  n2_notused: